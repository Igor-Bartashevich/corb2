/*
 * Copyright (c) 2004-2016 MarkLogic Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * The use of the Apache License does not indicate that this project is
 * affiliated with the Apache Software Foundation.
 */
package com.marklogic.developer.corb;

import com.marklogic.developer.TestHandler;
import static com.marklogic.developer.corb.ManagerTest.EXPORT_FILE_DIR;
import static com.marklogic.developer.corb.TestUtils.clearFile;
import static com.marklogic.developer.corb.TestUtils.clearSystemProperties;
import static com.marklogic.developer.corb.util.FileUtilsTest.getBytes;
import static com.marklogic.developer.corb.TestUtils.containsLogRecord;
import com.marklogic.developer.corb.util.FileUtils;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.LogRecord;
import java.util.logging.Logger;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Rule;
import org.junit.contrib.java.lang.system.ExpectedSystemExit;

/**
 *
 * @author Mads Hansen, MarkLogic Corporation
 */
public class ManagerIT {

    @Rule
    public final ExpectedSystemExit exit = ExpectedSystemExit.none();
    private final TestHandler testLogger = new TestHandler();

    public ManagerIT() {
    }

    @BeforeClass
    public static void setUpClass() {
    }

    @AfterClass
    public static void tearDownClass() {
    }

    /**
     * Perform pre-test initialization.
     *
     * @throws Exception if the initialization fails for some reason
     *
     * @generatedBy CodePro at 9/18/15 10:51 AM
     */
    @Before
    public void setUp()
            throws Exception {
        clearSystemProperties();
        Logger logger = Logger.getLogger(Manager.class.getName());
        logger.addHandler(testLogger);
        File tempDir = TestUtils.createTempDirectory();
        EXPORT_FILE_DIR = tempDir.toString();
    }

    /**
     * Perform post-test clean-up.
     *
     * @throws Exception if the clean-up fails for some reason
     *
     * @generatedBy CodePro at 9/18/15 10:51 AM
     */
    @After
    public void tearDown() throws Exception {
        FileUtils.deleteFile(ManagerTest.EXPORT_FILE_DIR);
        clearSystemProperties();
    }

    /**
     * Functional test for the Manager using program arguments.
     *
     * @throws Exception
     *
     */
    @Test
    public void testManagerUsingProgArgs() throws Exception {
        clearSystemProperties();
        String exportFileName = "testManagerUsingProgArgs.txt";
        String exportFileDir = ManagerTest.EXPORT_FILE_DIR;
        String[] args = ManagerTest.getDefaultArgs();
        args[14] = exportFileName;
        args[15] = null;
        File report = new File(exportFileDir + "/" + exportFileName);
        report.deleteOnExit();
        //First, verify the output using run()
        Manager manager = new Manager();
        manager.init(args);
        manager.run();
        byte[] out = getBytes(report);
        String corbOutput = new String(out).trim();
        System.out.println("testManagerUsingProgArgs,corbOutput=" + corbOutput);
        String expectedOutput = "This is being returned from the PRE-BATCH-MODULE which is often used for column headers.\nThis is a file generated by the XQUERY-MODULE (Transform) which typically contains a report.  This information [The Selector sends its greetings!  The COLLECTION-NAME is StringPassedToTheURIsModule] was passed from the Selector.\nThis is from the POST-BATCH-MODULE using the POST-XQUERY-MODULE.";
        boolean passed = expectedOutput.equals(corbOutput);
        clearFile(report);
        assertTrue(passed);
        //Then verify the exit code when invoking the main()
        exit.expectSystemExitWithStatus(Manager.EXIT_CODE_SUCCESS);
        Manager.main(args);
    }

    /**
     * Functional test for the Manager using system properties.
     *
     * @throws Exception
     *
     */
    @Test
    public void testManagerUsingSysProps() throws Exception {
        clearSystemProperties();
        System.setProperty("XCC-CONNECTION-URI", ManagerTest.XCC_CONNECTION_URI);
        System.setProperty("COLLECTION-NAME", ManagerTest.COLLECTION_NAME);
        System.setProperty("XQUERY-MODULE", ManagerTest.XQUERY_MODULE);
        System.setProperty("THREAD-COUNT", ManagerTest.THREAD_COUNT);
        System.setProperty("URIS-MODULE", "src/test/resources/selector.xqy|ADHOC");
        System.setProperty("MODULE-ROOT", ManagerTest.MODULES_ROOT);
        System.setProperty("MODULES-DATABASE", ManagerTest.MODULES_DATABASE);
        System.setProperty("INSTALL", "false");
        System.setProperty("PROCESS-TASK", ManagerTest.PROCESS_TASK);
        System.setProperty("PRE-BATCH-MODULE", ManagerTest.PRE_BATCH_MODULE);
        System.setProperty("PRE-BATCH-TASK", ManagerTest.PRE_BATCH_TASK);
        System.setProperty("POST-BATCH-MODULE", ManagerTest.POST_BATCH_MODULE);
        System.setProperty("POST-BATCH-TASK", ManagerTest.POST_BATCH_TASK);
        System.setProperty("EXPORT-FILE-DIR", ManagerTest.EXPORT_FILE_DIR);
        System.setProperty("EXPORT-FILE-NAME", "testManagerUsingSysProps.txt");
        String[] args = {};
        //First, verify the output by executing run()
        Manager manager = new Manager();
        manager.init(args);
        manager.run();
        File report = new File(ManagerTest.EXPORT_FILE_DIR + "/testManagerUsingSysProps.txt");
        report.deleteOnExit();
        byte[] out = getBytes(report);
        String corbOutput = new String(out).trim();
        String expectedOutput = "This is being returned from the PRE-BATCH-MODULE which is often used for column headers.\nThis is a file generated by the XQUERY-MODULE (Transform) which typically contains a report.  This information [The Selector sends its greetings!  The COLLECTION-NAME is StringPassedToTheURIsModule] was passed from the Selector.\nThis is from the POST-BATCH-MODULE using the POST-XQUERY-MODULE.";
        boolean passed = expectedOutput.equals(corbOutput);
        clearFile(report);
        assertTrue(passed);
        //Then verify the exit code when using the main() method
        exit.expectSystemExitWithStatus(Manager.EXIT_CODE_SUCCESS);
        Manager.main(args);
    }

    @Test
    public void testManagerUsingSysProps_largeUrisList() throws Exception {
        clearSystemProperties();
        int uriCount = 100;
        System.setProperty("XCC-CONNECTION-URI", ManagerTest.XCC_CONNECTION_URI);
        System.setProperty("COLLECTION-NAME", ManagerTest.COLLECTION_NAME);
        System.setProperty("XQUERY-MODULE", ManagerTest.XQUERY_MODULE);
        System.setProperty("THREAD-COUNT", "4");
        System.setProperty("URIS-MODULE", "src/test/resources/selectorLargeList.xqy|ADHOC");
        System.setProperty("URIS-MODULE.count", String.valueOf(uriCount));
        System.setProperty("MODULE-ROOT", ManagerTest.MODULES_ROOT);
        System.setProperty("MODULES-DATABASE", ManagerTest.MODULES_DATABASE);
        System.setProperty("INSTALL", "false");
        System.setProperty("PROCESS-TASK", ManagerTest.PROCESS_TASK);
        System.setProperty("PRE-BATCH-MODULE", ManagerTest.PRE_BATCH_MODULE);
        System.setProperty("PRE-BATCH-TASK", ManagerTest.PRE_BATCH_TASK);
        System.setProperty("POST-BATCH-MODULE", ManagerTest.POST_BATCH_MODULE);
        System.setProperty("POST-BATCH-TASK", ManagerTest.POST_BATCH_TASK);
        System.setProperty("EXPORT-FILE-DIR", ManagerTest.EXPORT_FILE_DIR);
        System.setProperty("EXPORT-FILE-NAME", "testManagerUsingSysProps.txt");
        System.setProperty("URIS-QUEUE-MAX-IN-MEMORY-SIZE", "10");
        System.setProperty("URIS-QUEUE-TEMP-DIR", "/var/tmp");
        String[] args = {};
        Manager manager = new Manager();
        manager.init(args);
        manager.run();
        File report = new File(ManagerTest.EXPORT_FILE_DIR + "/testManagerUsingSysProps.txt");
        report.deleteOnExit();
        int lineCount = FileUtils.getLineCount(report);
        assertEquals(uriCount + 2, lineCount);
        System.clearProperty("URIS-MODULE.count");
    }

    /**
     * Functional test for the Manager using a properties file.
     *
     * @throws Exception
     *
     */
    @Test
    public void testManagerUsingPropsFile() throws Exception {
        String exportFileName = ManagerTest.EXPORT_FILE_DIR + "/testManagerUsingPropsFile.txt";
        clearSystemProperties();
        System.setProperty("OPTIONS-FILE", "src/test/resources/helloWorld.properties");
        System.setProperty("EXPORT-FILE-NAME", exportFileName);
        String[] args = {};
        //First, verify the output using run()
        Manager manager = new Manager();
        manager.init(args);
        manager.run();
        File report = new File(exportFileName);
        report.deleteOnExit();
        boolean fileExists = report.exists();
        assertTrue(fileExists);
        byte[] out = getBytes(report);
        String corbOutput = new String(out).trim();
        System.out.println("testManagerUsingPropsFile,corbOutput=" + corbOutput);
        String expectedOutput = "This is being returned from the PRE-BATCH-MODULE which is often used for column headers.\nThis is a file generated by the XQUERY-MODULE (Transform) which typically contains a report.  This information [The Selector sends its greetings!  The COLLECTION-NAME is StringPassedToTheURIsModule] was passed from the Selector.\nThis is from the POST-BATCH-MODULE using the POST-XQUERY-MODULE.";
        boolean passed = expectedOutput.equals(corbOutput);
        clearFile(report);
        assertTrue(passed);
        //Then verify the exit code when using the main() method
        exit.expectSystemExitWithStatus(Manager.EXIT_CODE_SUCCESS);
        Manager.main(args);
    }

    /**
     * Functional test for the Manager using an input file for the URI selector.
     *
     * @throws Exception
     *
     */
    @Test
    public void testManagerUsingInputFile() throws Exception {
        clearSystemProperties();
        System.setProperty("XCC-CONNECTION-URI", ManagerTest.XCC_CONNECTION_URI);
        System.setProperty("COLLECTION-NAME", ManagerTest.COLLECTION_NAME);
        System.setProperty("XQUERY-MODULE", ManagerTest.XQUERY_MODULE);
        System.setProperty("THREAD-COUNT", ManagerTest.THREAD_COUNT);
        System.setProperty("MODULE-ROOT", ManagerTest.MODULES_ROOT);
        System.setProperty("MODULES-DATABASE", ManagerTest.MODULES_DATABASE);
        System.setProperty("INSTALL", "false");
        System.setProperty("PROCESS-TASK", ManagerTest.PROCESS_TASK);
        System.setProperty("PRE-BATCH-MODULE", ManagerTest.PRE_BATCH_MODULE);
        System.setProperty("PRE-BATCH-TASK", ManagerTest.PRE_BATCH_TASK);
        System.setProperty("POST-BATCH-MODULE", ManagerTest.POST_BATCH_MODULE);
        System.setProperty("POST-BATCH-TASK", ManagerTest.POST_BATCH_TASK);
        System.setProperty("EXPORT-FILE-DIR", ManagerTest.EXPORT_FILE_DIR);
        System.setProperty("EXPORT-FILE-NAME", "testManagerUsingInputFile.txt");
        System.setProperty("URIS-FILE", "src/test/resources/uriInputFile.txt");
        String[] args = {};
        //First, verify the output using run()
        Manager manager = new Manager();
        manager.init(args);
        manager.run();
        String exportFilePath = ManagerTest.EXPORT_FILE_DIR + "/testManagerUsingInputFile.txt";
        File report = new File(exportFilePath);
        report.deleteOnExit();
        boolean fileExists = report.exists();
        assertTrue(fileExists);
        byte[] out = getBytes(report);
        String corbOutput = new String(out).trim();
        System.out.println("testManagerUsingInputFile,corbOutput=" + corbOutput);
        String expectedOutput = "This is being returned from the PRE-BATCH-MODULE which is often used for column headers.\nThis is a file generated by the XQUERY-MODULE (Transform) which typically contains a report.  This information [Hello from the URIS-FILE!] was passed from the Selector.\nThis is from the POST-BATCH-MODULE using the POST-XQUERY-MODULE.";
        boolean passed = expectedOutput.equals(corbOutput);
        clearFile(report);
        assertTrue(passed);
        //Then verify the exit code when using the main() method
        exit.expectSystemExitWithStatus(Manager.EXIT_CODE_SUCCESS);
        Manager.main(args);
    }

    /**
     * Functional test for the Manager's PRE-BATCH-TASK.
     *
     * @throws Exception
     *
     */
    @Test
    public void testManagersPreBatchTask() throws Exception {
        clearSystemProperties();
        System.setProperty("XCC-CONNECTION-URI", ManagerTest.XCC_CONNECTION_URI);
        System.setProperty("COLLECTION-NAME", ManagerTest.COLLECTION_NAME);
        System.setProperty("XQUERY-MODULE", ManagerTest.XQUERY_MODULE);
        System.setProperty("THREAD-COUNT", ManagerTest.THREAD_COUNT);
        System.setProperty("MODULE-ROOT", ManagerTest.MODULES_ROOT);
        System.setProperty("MODULES-DATABASE", ManagerTest.MODULES_DATABASE);
        System.setProperty("INSTALL", "false");
        System.setProperty("PROCESS-TASK", ManagerTest.PROCESS_TASK);
        System.setProperty("PRE-BATCH-MODULE", ManagerTest.PRE_BATCH_MODULE);
        System.setProperty("PRE-BATCH-TASK", ManagerTest.PRE_BATCH_TASK);
        System.setProperty("POST-BATCH-MODULE", ManagerTest.POST_BATCH_MODULE);
        System.setProperty("POST-BATCH-TASK", ManagerTest.POST_BATCH_TASK);
        System.setProperty("EXPORT-FILE-DIR", ManagerTest.EXPORT_FILE_DIR);
        System.setProperty("EXPORT-FILE-NAME", "testManagersPreBatchTask.txt");
        System.setProperty("URIS-FILE", ManagerTest.URIS_FILE);
        String[] args = {};
        //First, verify output executing run()
        Manager manager = new Manager();
        manager.init(args);
        manager.run();
        String exportFilePath = ManagerTest.EXPORT_FILE_DIR + "/testManagersPreBatchTask.txt";
        File report = new File(exportFilePath);
        report.deleteOnExit();
        boolean fileExists = report.exists();
        assertTrue(fileExists);
        byte[] out = getBytes(report);
        String corbOutput = new String(out).trim();
        System.out.println("testManagersPreBatchTask,corbOutput=" + corbOutput);
        String expectedOutput = "This is being returned from the PRE-BATCH-MODULE which is often used for column headers.";
        boolean passed = corbOutput.startsWith(expectedOutput);
        clearFile(report);
        assertTrue(passed);
        //Then, verify the exit code running main()
        exit.expectSystemExitWithStatus(Manager.EXIT_CODE_SUCCESS);
        Manager.main(args);
    }

    /**
     * Functional test for the Manager's POST-BATCH-TASK.
     *
     * @throws Exception
     *
     */
    @Test
    public void testManagersPostBatchTask() throws Exception {
        clearSystemProperties();
        System.setProperty("XCC-CONNECTION-URI", ManagerTest.XCC_CONNECTION_URI);
        System.setProperty("COLLECTION-NAME", ManagerTest.COLLECTION_NAME);
        System.setProperty("XQUERY-MODULE", ManagerTest.XQUERY_MODULE);
        System.setProperty("THREAD-COUNT", ManagerTest.THREAD_COUNT);
        System.setProperty("MODULE-ROOT", ManagerTest.MODULES_ROOT);
        System.setProperty("MODULES-DATABASE", ManagerTest.MODULES_DATABASE);
        System.setProperty("INSTALL", "false");
        System.setProperty("PROCESS-TASK", ManagerTest.PROCESS_TASK);
        System.setProperty("PRE-BATCH-MODULE", ManagerTest.PRE_BATCH_MODULE);
        System.setProperty("PRE-BATCH-TASK", ManagerTest.PRE_BATCH_TASK);
        System.setProperty("POST-BATCH-MODULE", ManagerTest.POST_BATCH_MODULE);
        System.setProperty("POST-BATCH-TASK", ManagerTest.POST_BATCH_TASK);
        System.setProperty("EXPORT-FILE-DIR", ManagerTest.EXPORT_FILE_DIR);
        System.setProperty("EXPORT-FILE-NAME", "testManagersPostBatchTask.txt");
        System.setProperty("URIS-FILE", ManagerTest.URIS_FILE);
        String[] args = {};
        //First, verify the output using run()
        Manager manager = new Manager();
        manager.init(args);
        manager.run();
        String exportFilePath = ManagerTest.EXPORT_FILE_DIR + "/testManagersPostBatchTask.txt";
        File report = new File(exportFilePath);
        boolean fileExists = report.exists();
        assertTrue(fileExists);
        byte[] out = getBytes(report);
        String corbOutput = new String(out).trim();
        System.out.println("testManagersPostBatchTask,corbOutput=" + corbOutput);
        String expectedOutput = "This is from the POST-BATCH-MODULE using the POST-XQUERY-MODULE.";
        boolean passed = corbOutput.endsWith(expectedOutput);
        clearFile(report);
        assertTrue(passed);
        //Then verify the exit code when using the main() method
        exit.expectSystemExitWithStatus(Manager.EXIT_CODE_SUCCESS);
        Manager.main(args);
    }

    /**
     * Functional test for the Manager's POST-BATCH-TASK for zipping the output
     * file.
     *
     * @throws Exception
     *
     */
    @Test
    public void testManagersPostBatchTaskZip() throws Exception {
        clearSystemProperties();
        System.setProperty("XCC-CONNECTION-URI", ManagerTest.XCC_CONNECTION_URI);
        System.setProperty("COLLECTION-NAME", ManagerTest.COLLECTION_NAME);
        System.setProperty("XQUERY-MODULE", ManagerTest.XQUERY_MODULE);
        System.setProperty("THREAD-COUNT", ManagerTest.THREAD_COUNT);
        System.setProperty("MODULE-ROOT", ManagerTest.MODULES_ROOT);
        System.setProperty("MODULES-DATABASE", ManagerTest.MODULES_DATABASE);
        System.setProperty("INSTALL", "false");
        System.setProperty("PROCESS-TASK", ManagerTest.PROCESS_TASK);
        System.setProperty("PRE-BATCH-MODULE", ManagerTest.PRE_BATCH_MODULE);
        System.setProperty("PRE-BATCH-TASK", ManagerTest.PRE_BATCH_TASK);
        System.setProperty("POST-BATCH-MODULE", ManagerTest.POST_BATCH_MODULE);
        System.setProperty("POST-BATCH-TASK", ManagerTest.POST_BATCH_TASK);
        System.setProperty("EXPORT-FILE-DIR", ManagerTest.EXPORT_FILE_DIR);
        System.setProperty("EXPORT-FILE-NAME", "helloWorld.txt");
        System.setProperty("URIS-FILE", ManagerTest.URIS_FILE);
        System.setProperty("EXPORT_FILE_AS_ZIP", "true");
        String[] args = {};
        //First, verify the output using run()
        Manager manager = new Manager();
        manager.init(args);
        manager.run();
        String zippedExportFilePath = ManagerTest.EXPORT_FILE_DIR + "/helloWorld.txt.zip";
        File report = new File(zippedExportFilePath);
        boolean fileExists = report.exists();
        clearFile(report);
        assertTrue(fileExists);
        //Then verify the exit code when using the main() method
        exit.expectSystemExitWithStatus(Manager.EXIT_CODE_SUCCESS);
        Manager.main(args);
    }

    /**
     * Functional test for the Manager's POST-BATCH-TASK.
     *
     * @throws Exception
     *
     */
    @Test
    public void testManagerJavaScriptTransform() throws Exception {
        clearSystemProperties();
        System.setProperty("XCC-CONNECTION-URI", ManagerTest.XCC_CONNECTION_URI);
        System.setProperty("COLLECTION-NAME", ManagerTest.COLLECTION_NAME);
        System.setProperty("XQUERY-MODULE", "src/test/resources/mod-print-uri.sjs|ADHOC");
        System.setProperty("THREAD-COUNT", ManagerTest.THREAD_COUNT);
        System.setProperty("MODULE-ROOT", ManagerTest.MODULES_ROOT);
        System.setProperty("MODULES-DATABASE", ManagerTest.MODULES_DATABASE);
        System.setProperty("INSTALL", "false");
        System.setProperty("PROCESS-TASK", ManagerTest.PROCESS_TASK);
        System.setProperty("PRE-BATCH-MODULE", ManagerTest.PRE_BATCH_MODULE);
        System.setProperty("PRE-BATCH-TASK", ManagerTest.PRE_BATCH_TASK);
        System.setProperty("POST-BATCH-MODULE", ManagerTest.POST_BATCH_MODULE);
        System.setProperty("POST-BATCH-TASK", ManagerTest.POST_BATCH_TASK);
        System.setProperty("EXPORT-FILE-DIR", ManagerTest.EXPORT_FILE_DIR);
        System.setProperty("EXPORT-FILE-NAME", "testManagerJavaScriptTransform.txt");
        System.setProperty("URIS-FILE", ManagerTest.URIS_FILE);
        System.setProperty("XQUERY-MODULE.foo", "bar1");
        String[] args = {};
        //First, verify the output using run()
        Manager manager = new Manager();
        manager.init(args);
        manager.run();
        String exportFilePath = ManagerTest.EXPORT_FILE_DIR + "/testManagerJavaScriptTransform.txt";
        File report = new File(exportFilePath);
        report.deleteOnExit();
        boolean fileExists = report.exists();
        assertTrue(fileExists);
        byte[] out = getBytes(report);
        String corbOutput = new String(out).trim();
        System.out.println("testManagerJavaScriptTransform,corbOutput=" + corbOutput);
        String expectedOutput = "object-id-1=bar1";
        System.out.println(corbOutput);
        boolean passed = corbOutput.contains(expectedOutput);
        clearFile(report);
        assertTrue(passed);
        //Then verify the exit code when using the main() method
        exit.expectSystemExitWithStatus(Manager.EXIT_CODE_SUCCESS);
        Manager.main(args);
    }

    /**
     * Test of main method, of class Manager.
     */
    //Main instantiates a new Manager, so need to move to Integration or change implementation
    @Test
    public void testMain_nullArgs() {
        System.out.println("main");
        String[] args = null;
        exit.expectSystemExit();
        Manager.main(args);
        List<LogRecord> records = testLogger.getLogRecords();
        assertEquals(Level.SEVERE, records.get(0).getLevel());
        assertEquals("Error initializing CORB", records.get(0).getMessage());
    }

    @Test
    public void testMain_exception() {
        System.out.println("main");
        String[] args = ManagerTest.getDefaultArgs();
        exit.expectSystemExit();
        Manager.main(args);
        List<LogRecord> records = testLogger.getLogRecords();
        assertEquals(Level.SEVERE, records.get(0).getLevel());
        assertEquals("Error initializing CORB", records.get(0).getMessage());
    }

    @Test
    public void testCommandFilePause() throws IOException, Exception {
        System.out.println("pause/resume test");
        clearSystemProperties();
        File exportFile = new File(ManagerTest.EXPORT_FILE_DIR, ManagerTest.EXPORT_FILE_NAME);
        exportFile.deleteOnExit();
        File commandFile = new File(ManagerTest.EXPORT_FILE_DIR, Math.random() + ".txt");
        commandFile.deleteOnExit();
        System.setProperty(Options.XCC_CONNECTION_URI, ManagerTest.XCC_CONNECTION_URI);
        System.setProperty(Options.URIS_FILE, ManagerTest.URIS_FILE);
        System.setProperty(Options.THREAD_COUNT, "1");
        System.setProperty(Options.PROCESS_MODULE, "src/test/resources/transformSlow.xqy|ADHOC");
        System.setProperty(Options.PROCESS_TASK, ManagerTest.PROCESS_TASK);
        System.setProperty(Options.EXPORT_FILE_NAME, ManagerTest.EXPORT_FILE_NAME);
        System.setProperty(Options.EXPORT_FILE_DIR, ManagerTest.EXPORT_FILE_DIR);
        System.setProperty(Options.COMMAND_FILE, commandFile.getAbsolutePath());
        Manager instance = new Manager();
        instance.init(new String[0]);
        Runnable pause = new Runnable() {
            @Override
            public void run() {
                Properties props = new Properties();
                props.put(Options.COMMAND, "pause");
                File commandFile = new File(System.getProperty(Options.COMMAND_FILE));
                try {
                    commandFile.createNewFile();
                    FileOutputStream fos = new FileOutputStream(commandFile);
                    props.store(fos, null);
                    fos.close();
                } catch (IOException ex) {
                    Logger.getLogger(ManagerTest.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        Runnable resume = new Runnable() {
            @Override
            public void run() {
                Properties props = new Properties();
                props.put(Options.COMMAND, "RESUME");
                props.put(Options.THREAD_COUNT, "6");
                File commandFile = new File(System.getProperty(Options.COMMAND_FILE));
                try {
                    FileOutputStream fos = new FileOutputStream(commandFile);
                    props.store(fos, null);
                    fos.close();
                } catch (IOException ex) {
                    Logger.getLogger(ManagerTest.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        ScheduledExecutorService service = Executors.newScheduledThreadPool(1);
        service.schedule(pause, 1, TimeUnit.SECONDS);
        service.schedule(resume, 5, TimeUnit.SECONDS);
        instance.run();
        int lineCount = FileUtils.getLineCount(exportFile);
        assertEquals(8, lineCount);
        List<LogRecord> records = testLogger.getLogRecords();
        assertTrue(containsLogRecord(records, new LogRecord(Level.INFO, "pausing")));
        assertTrue(containsLogRecord(records, new LogRecord(Level.INFO, "resuming")));
    }

    @Test
    public void testCommandFilePause_resumeWhenCommandFileChangedAndNoCommand() throws IOException, Exception {
        System.out.println("pause/resume test");
        clearSystemProperties();
        File exportFile = new File(ManagerTest.EXPORT_FILE_DIR, ManagerTest.EXPORT_FILE_NAME);
        exportFile.deleteOnExit();
        File commandFile = new File(ManagerTest.EXPORT_FILE_DIR, Math.random() + ".txt");
        commandFile.deleteOnExit();
        System.setProperty(Options.XCC_CONNECTION_URI, ManagerTest.XCC_CONNECTION_URI);
        System.setProperty(Options.URIS_FILE, ManagerTest.URIS_FILE);
        System.setProperty(Options.THREAD_COUNT, "1");
        System.setProperty(Options.PROCESS_MODULE, "src/test/resources/transformSlow.xqy|ADHOC");
        System.setProperty(Options.PROCESS_TASK, ManagerTest.PROCESS_TASK);
        System.setProperty(Options.EXPORT_FILE_NAME, ManagerTest.EXPORT_FILE_NAME);
        System.setProperty(Options.EXPORT_FILE_DIR, ManagerTest.EXPORT_FILE_DIR);
        System.setProperty(Options.COMMAND_FILE, commandFile.getAbsolutePath());
        Manager instance = new Manager();
        instance.init(new String[0]);
        Runnable pause = new Runnable() {
            @Override
            public void run() {
                Properties props = new Properties();
                props.put(Options.COMMAND, "pause");
                File commandFile = new File(System.getProperty(Options.COMMAND_FILE));
                try {
                    commandFile.createNewFile();
                    FileOutputStream fos = new FileOutputStream(commandFile);
                    props.store(fos, null);
                    fos.close();
                } catch (IOException ex) {
                    Logger.getLogger(ManagerTest.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        Runnable resume = new Runnable() {
            @Override
            public void run() {
                Properties props = new Properties();
                File commandFile = new File(System.getProperty(Options.COMMAND_FILE));
                try {
                    FileOutputStream fos = new FileOutputStream(commandFile);
                    props.store(fos, null);
                    fos.close();
                } catch (IOException ex) {
                    Logger.getLogger(ManagerTest.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        ScheduledExecutorService service = Executors.newScheduledThreadPool(1);
        service.schedule(pause, 1, TimeUnit.SECONDS);
        service.schedule(resume, 4, TimeUnit.SECONDS);
        instance.run();
        int lineCount = FileUtils.getLineCount(exportFile);
        assertEquals(8, lineCount);
        List<LogRecord> records = testLogger.getLogRecords();
        assertTrue(containsLogRecord(records, new LogRecord(Level.INFO, "pausing")));
        assertTrue(containsLogRecord(records, new LogRecord(Level.INFO, "resuming")));
    }

    @Test
    public void testCommandFileStop() throws IOException, Exception {
        System.out.println("stop test");
        clearSystemProperties();
        File exportFile = new File(ManagerTest.EXPORT_FILE_DIR, ManagerTest.EXPORT_FILE_NAME);
        exportFile.deleteOnExit();
        File commandFile = new File(ManagerTest.EXPORT_FILE_DIR, Math.random() + ".txt");
        commandFile.deleteOnExit();
        System.setProperty(Options.XCC_CONNECTION_URI, ManagerTest.XCC_CONNECTION_URI);
        System.setProperty(Options.URIS_FILE, ManagerTest.URIS_FILE);
        System.setProperty(Options.THREAD_COUNT, "1");
        System.setProperty(Options.PROCESS_MODULE, "src/test/resources/transformSlow.xqy|ADHOC");
        System.setProperty(Options.PROCESS_TASK, ManagerTest.PROCESS_TASK);
        System.setProperty(Options.EXPORT_FILE_NAME, ManagerTest.EXPORT_FILE_NAME);
        System.setProperty(Options.EXPORT_FILE_DIR, ManagerTest.EXPORT_FILE_DIR);
        System.setProperty(Options.COMMAND_FILE, commandFile.getAbsolutePath());
        Runnable stop = new Runnable() {
            @Override
            public void run() {
                Properties props = new Properties();
                props.put(Options.COMMAND, "STOP");
                File commandFile = new File(System.getProperty(Options.COMMAND_FILE));
                try {
                    commandFile.createNewFile();
                    FileOutputStream fos = new FileOutputStream(commandFile);
                    props.store(fos, null);
                    fos.close();
                } catch (IOException ex) {
                    Logger.getLogger(ManagerTest.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        ScheduledExecutorService service = Executors.newScheduledThreadPool(1);
        service.schedule(stop, 1, TimeUnit.SECONDS);
        exit.expectSystemExitWithStatus(Manager.EXIT_CODE_STOP_COMMAND);
        Manager.main(new String[0]);
        int lineCount = FileUtils.getLineCount(exportFile);
        assertNotEquals(8, lineCount);
        List<LogRecord> records = testLogger.getLogRecords();
        assertTrue(containsLogRecord(records, new LogRecord(Level.INFO, "cleaning up")));
    }

    @Test
    public void testCommandFileLowerThreads() throws IOException, Exception {
        System.out.println("lower THREAD-COUNT test");
        clearSystemProperties();
        File exportFile = new File(ManagerTest.EXPORT_FILE_DIR, ManagerTest.EXPORT_FILE_NAME);
        exportFile.deleteOnExit();
        File commandFile = new File(ManagerTest.EXPORT_FILE_DIR, Math.random() + ".txt");
        commandFile.deleteOnExit();
        System.setProperty(Options.XCC_CONNECTION_URI, ManagerTest.XCC_CONNECTION_URI);
        System.setProperty(Options.URIS_FILE, ManagerTest.URIS_FILE);
        System.setProperty(Options.THREAD_COUNT, "4");
        System.setProperty(Options.PROCESS_MODULE, "src/test/resources/transformSlow.xqy|ADHOC");
        System.setProperty(Options.PROCESS_TASK, ManagerTest.PROCESS_TASK);
        System.setProperty(Options.EXPORT_FILE_NAME, ManagerTest.EXPORT_FILE_NAME);
        System.setProperty(Options.EXPORT_FILE_DIR, ManagerTest.EXPORT_FILE_DIR);
        System.setProperty(Options.COMMAND_FILE, commandFile.getAbsolutePath());
        Manager instance = new Manager();
        instance.init(new String[0]);
        Runnable adjustThreads = new Runnable() {
            @Override
            public void run() {
                File commandFile = new File(System.getProperty(Options.COMMAND_FILE));
                try {
                    commandFile.createNewFile();
                    Properties props = new Properties();
                    props.put(Options.THREAD_COUNT, "1");
                    FileOutputStream fos = new FileOutputStream(commandFile);
                    props.store(fos, null);
                    fos.close();
                } catch (IOException ex) {
                    Logger.getLogger(ManagerTest.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        ScheduledExecutorService service = Executors.newScheduledThreadPool(1);
        service.schedule(adjustThreads, 1, TimeUnit.SECONDS);
        instance.run();
        int lineCount = FileUtils.getLineCount(exportFile);
        assertEquals(8, lineCount);
        List<LogRecord> records = testLogger.getLogRecords();
        assertTrue(containsLogRecord(records, new LogRecord(Level.INFO, "Changed {0} to {1}")));
    }

}
