/*
 * Copyright (c) 2004-2016 MarkLogic Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * The use of the Apache License does not indicate that this project is
 * affiliated with the Apache Software Foundation.
 */
package com.marklogic.developer.corb;

import com.marklogic.developer.TestHandler;
import static com.marklogic.developer.corb.TestUtils.clearFile;
import static com.marklogic.developer.corb.TestUtils.clearSystemProperties;
import static com.marklogic.developer.corb.util.FileUtilsTest.getBytes;
import static com.marklogic.developer.corb.TestUtils.containsLogRecord;
import com.marklogic.developer.corb.util.FileUtils;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.LogRecord;
import java.util.logging.Logger;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Rule;
import org.junit.contrib.java.lang.system.ExpectedSystemExit;

/**
 *
 * @author Mads Hansen, MarkLogic Corporation
 */
public class ManagerPT {

    @Rule
    public final ExpectedSystemExit exit = ExpectedSystemExit.none();
    public static final String SLASH = "/";
    private final TestHandler testLogger = new TestHandler();
    private static final Logger MANAGER_LOG = Logger.getLogger(Manager.class.getName());
    private static final Logger LOG = Logger.getLogger(ManagerPT.class.getName());
    private static final String EXT_TXT = ".txt";
    private static final String TRANSFORM_SLOW_MODULE = "src/test/resources/transformSlow.xqy|ADHOC";
    private static final String SLOW_CMD = "pause";
    private static final LogRecord PAUSING = new LogRecord(Level.INFO, "pausing");
    private static final LogRecord RESUMING = new LogRecord(Level.INFO, "resuming");
    private static final String CORB_INIT_ERROR_MSG = "Error initializing CORB";
    private static final String EXPECTED_OUTPUT = "This is being returned from the PRE-BATCH-MODULE which is often used for column headers.\nThis is a file generated by the XQUERY-MODULE (Transform) which typically contains a report.  This information [The Selector sends its greetings!  The COLLECTION-NAME is StringPassedToTheURIsModule] was passed from the Selector.\nThis is from the POST-BATCH-MODULE using the POST-XQUERY-MODULE.";
    private static final String POST_XQUERY_MODULE_OUTPUT = "This is from the POST-BATCH-MODULE using the POST-XQUERY-MODULE.";

    @Before
    public void setUp() throws IOException {
        clearSystemProperties();
        MANAGER_LOG.addHandler(testLogger);
        File tempDir = TestUtils.createTempDirectory();
        ManagerTest.EXPORT_FILE_DIR = tempDir.toString();
    }

    @After
    public void tearDown() throws IOException {
        FileUtils.deleteFile(ManagerTest.EXPORT_FILE_DIR);
        clearSystemProperties();
    }
 
    @Test
    public void testExtremelyLargeUrisList() {
         
        clearSystemProperties();
        int uriCount = 9999999;
        String exportFilename = "testManagerUsingSysProps1.txt";
        System.setProperty(Options.XCC_CONNECTION_URI, ManagerTest.XCC_CONNECTION_URI);
        System.setProperty(Options.COLLECTION_NAME, ManagerTest.COLLECTION_NAME);
        System.setProperty(Options.PROCESS_MODULE, ManagerTest.XQUERY_MODULE);
        System.setProperty(Options.THREAD_COUNT, "8");
        System.setProperty(Options.URIS_MODULE, "src/test/resources/selectorLargeList.xqy|ADHOC");
        System.setProperty(Options.URIS_MODULE + ".count", String.valueOf(uriCount));
        System.setProperty(Options.MODULE_ROOT, ManagerTest.MODULES_ROOT);
        System.setProperty(Options.MODULES_DATABASE, ManagerTest.MODULES_DATABASE);
        System.setProperty(Options.INSTALL, Boolean.toString(false));
        System.setProperty(Options.PROCESS_TASK, ManagerTest.PROCESS_TASK);
        System.setProperty(Options.PRE_BATCH_MODULE, ManagerTest.PRE_BATCH_MODULE);
        System.setProperty(Options.PRE_BATCH_TASK, ManagerTest.PRE_BATCH_TASK);
        System.setProperty(Options.POST_BATCH_MODULE, ManagerTest.POST_BATCH_MODULE);
        System.setProperty(Options.POST_BATCH_TASK, ManagerTest.POST_BATCH_TASK);
        System.setProperty(Options.EXPORT_FILE_DIR, ManagerTest.EXPORT_FILE_DIR);
        System.setProperty(Options.EXPORT_FILE_NAME, exportFilename);
        System.setProperty(Options.DISK_QUEUE_MAX_IN_MEMORY_SIZE, String.valueOf(10000));
        System.setProperty(Options.DISK_QUEUE_TEMP_DIR, "/var/tmp");
        String[] args = {};
        Manager manager = new Manager();
        try {
            manager.init(args);
            manager.run();
            File report = new File(ManagerTest.EXPORT_FILE_DIR + SLASH + exportFilename);
            report.deleteOnExit();
            int lineCount = FileUtils.getLineCount(report);
            assertEquals(uriCount + 2, lineCount);
        } catch (Exception ex) {
            LOG.log(Level.SEVERE, null, ex);
            fail();
        }
    }
  
}
