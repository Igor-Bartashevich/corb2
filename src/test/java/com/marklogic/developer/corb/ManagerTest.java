package com.marklogic.developer.corb;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.PrintWriter;
import java.net.URI;
import java.util.Properties;
import java.util.concurrent.ExecutionException;
import org.junit.*;
import static org.junit.Assert.*;

import com.marklogic.xcc.ContentSource;
import com.marklogic.xcc.SecurityOptions;
import com.marklogic.xcc.jndi.ContentSourceBean;

/**
 * The class <code>ManagerTest</code> contains tests for the class <code>{@link Manager}</code>.
 *
 * @generatedBy CodePro at 9/18/15 10:51 AM
 * @author matthew.heckel
 * @version $Revision: 1.0 $
 */
public class ManagerTest {
	
	/**
	 * Functional test for the Manager using program arguments.
	 *
	 * @throws Exception
	 *
	 */
	@Test
	public void testManagerUsingProgArgs()
		throws Exception {
		clearProperties();
		String xccConnection = "xcc://admin:admin@localhost:2223/FFE";
		String collection = "StringPassedToTheURIsModule";
		String xqueryModuleAlsoCalledTransformModule = "src\\test\\resources\\transform.xqy|ADHOC"; 
		String threadCount = "2";
		String urisModuleAlsoCalledSelector = "src\\test\\resources\\selector.xqy|ADHOC";
		String modulesRoot = "/";
		String modulesDatabase = "Document";
		String install = "true";
		String processTask = "com.marklogic.developer.corb.ExportBatchToFileTask";
		String preBatchModule = "src\\test\\resources\\preBatchModule.xqy|ADHOC";
		String preBatchTask = "com.marklogic.developer.corb.PreBatchUpdateFileTask";
		String postXqueryModule = "src\\test\\resources\\postBatchModule.xqy|ADHOC";
		String postXqueryTask  = "com.marklogic.developer.corb.PostBatchUpdateFileTask";
		String exportFileDir = "src\\test\\resources\\";
		String exportFileName = "testManagerUsingProgArgs.txt";
		
		String[] args = { xccConnection,collection,xqueryModuleAlsoCalledTransformModule,threadCount,
						urisModuleAlsoCalledSelector,modulesRoot,modulesDatabase,install,processTask,
						preBatchModule,preBatchTask,postXqueryModule,postXqueryTask,exportFileDir,
						exportFileName	};
				
		Manager.main(args);
		
		File report = new File(exportFileDir+exportFileName);
		report.deleteOnExit();
		char [] a = new char[500];
		if (report.exists()){
			FileReader reader = new FileReader(report);
			reader.read(a);	
		}
		String corbOutput = String.valueOf(a).trim();
		System.out.println("testManagerUsingProgArgs,corbOutput=" + corbOutput);
		String expectedOutput = "This is being returned from the PRE-BATCH-MODULE which is often used for column headers.\nThis is a file generated by the XQUERY-MODULE (Transform) which typically contains a report.  This information [The Selector sends its greetings!  The COLLECTION-NAME is StringPassedToTheURIsModule] was passed from the Selector.\nThis is from the POST-BATCH-MODULE using the POST-XQUERY-MODULE.";
	    boolean passed = expectedOutput.equals(corbOutput);
        clearFile(report);
	    assertTrue(passed);
	}

	/**
	 * Functional test for the Manager using system properties.
	 *
	 * @throws Exception
	 *
	 */
	@Test
	public void testManagerUsingSysProps()
		throws Exception {
		clearProperties();
		System.setProperty("XCC-CONNECTION-URI","xcc://admin:admin@localhost:2223/FFE");
		System.setProperty("COLLECTION-NAME","StringPassedToTheURIsModule"); 
		System.setProperty("XQUERY-MODULE","src\\test\\resources\\transform.xqy|ADHOC");
		System.setProperty("THREAD-COUNT","2");
		System.setProperty("URIS-MODULE","src\\test\\resources\\selector.xqy|ADHOC");
		System.setProperty("MODULE-ROOT","/");
		System.setProperty("MODULES-DATABASE","Document"); 
		System.setProperty("INSTALL","false");
		System.setProperty("PROCESS-TASK","com.marklogic.developer.corb.ExportBatchToFileTask");
		System.setProperty("PRE-BATCH-MODULE","src\\test\\resources\\preBatchModule.xqy|ADHOC");
		System.setProperty("PRE-BATCH-TASK","com.marklogic.developer.corb.PreBatchUpdateFileTask");
		System.setProperty("POST-BATCH-MODULE","src\\test\\resources\\postBatchModule.xqy|ADHOC");
		System.setProperty("POST-BATCH-TASK","com.marklogic.developer.corb.PostBatchUpdateFileTask");
		System.setProperty("EXPORT-FILE-DIR","src\\test\\resources\\"); 
		System.setProperty("EXPORT-FILE-NAME","testManagerUsingSysProps.txt");
		
		String[] args = {};
				
		Manager.main(args);
		
		File report = new File("src\\test\\resources\\testManagerUsingSysProps.txt");
		report.deleteOnExit();
		char [] a = new char[500];
		FileReader reader = new FileReader(report);
		reader.read(a);		
		String corbOutput = String.valueOf(a).trim();
		System.out.println("testManagerUsingSysProps,corbOutput=" + corbOutput);
		String expectedOutput = "This is being returned from the PRE-BATCH-MODULE which is often used for column headers.\nThis is a file generated by the XQUERY-MODULE (Transform) which typically contains a report.  This information [The Selector sends its greetings!  The COLLECTION-NAME is StringPassedToTheURIsModule] was passed from the Selector.\nThis is from the POST-BATCH-MODULE using the POST-XQUERY-MODULE.";
		boolean passed = expectedOutput.equals(corbOutput);
		clearFile(report);
		assertTrue(passed);
	}
	
	/**
	 * Functional test for the Manager using a properties file.
	 *
	 * @throws Exception
	 *
	 */
	@Test
	public void testManagerUsingPropsFile()
		throws Exception {
		clearProperties();
		System.setProperty("OPTIONS-FILE","src\\test\\resources\\helloWorld.properties");	
		System.setProperty("EXPORT-FILE-NAME","src\\test\\resources\\testManagerUsingPropsFile.txt");
		
		String[] args = {};
		Manager.main(args);
		String exportFilePath = "src\\test\\resources\\testManagerUsingPropsFile.txt";
		File report = new File(exportFilePath);
		report.deleteOnExit();
		boolean fileExists = report.exists();
		assertTrue(fileExists);
		FileReader reader = new FileReader(report);
		char [] a = new char[400];
		reader.read(a);
		String corbOutput = String.valueOf(a).trim();
		System.out.println("testManagerUsingPropsFile,corbOutput=" + corbOutput);
		String expectedOutput = "This is being returned from the PRE-BATCH-MODULE which is often used for column headers.\nThis is a file generated by the XQUERY-MODULE (Transform) which typically contains a report.  This information [The Selector sends its greetings!  The COLLECTION-NAME is StringPassedToTheURIsModule] was passed from the Selector.\nThis is from the POST-BATCH-MODULE using the POST-XQUERY-MODULE.";
		boolean passed = expectedOutput.equals(corbOutput);
		clearFile(report);
		assertTrue(passed);
	}

	/**
	 * Functional test for the Manager using an input file for the URI selector.
	 *
	 * @throws Exception
	 *
	 */
	@Test
	public void testManagerUsingInputFile()
		throws Exception {
		clearProperties();
		System.setProperty("XCC-CONNECTION-URI","xcc://admin:admin@localhost:2223/FFE");
		System.setProperty("COLLECTION-NAME","StringPassedToTheURIsModule"); 
		System.setProperty("XQUERY-MODULE","src\\test\\resources\\transform.xqy|ADHOC");
		System.setProperty("THREAD-COUNT","2");
		System.setProperty("MODULE-ROOT","/");
		System.setProperty("MODULES-DATABASE","Document"); 
		System.setProperty("INSTALL","false");
		System.setProperty("PROCESS-TASK","com.marklogic.developer.corb.ExportBatchToFileTask");
		System.setProperty("PRE-BATCH-MODULE","src\\test\\resources\\preBatchModule.xqy|ADHOC");
		System.setProperty("PRE-BATCH-TASK","com.marklogic.developer.corb.PreBatchUpdateFileTask");
		System.setProperty("POST-BATCH-MODULE","src\\test\\resources\\postBatchModule.xqy|ADHOC");
		System.setProperty("POST-BATCH-TASK","com.marklogic.developer.corb.PostBatchUpdateFileTask");
		System.setProperty("EXPORT-FILE-DIR","src\\test\\resources\\"); 
		System.setProperty("EXPORT-FILE-NAME","testManagerUsingInputFile.txt");
		System.setProperty("URIS-FILE","src\\test\\resources\\uriInputFile.txt");
		String[] args = {};
		Manager.main(args);
		String exportFilePath = "src\\test\\resources\\testManagerUsingInputFile.txt";
		File report = new File(exportFilePath);
		report.deleteOnExit();
		boolean fileExists = report.exists();
		assertTrue(fileExists);
		FileReader reader = new FileReader(report);
		char [] a = new char[400];
		reader.read(a);
		String corbOutput = String.valueOf(a).trim();
		System.out.println("testManagerUsingInputFile,corbOutput=" + corbOutput);
		String expectedOutput = "This is being returned from the PRE-BATCH-MODULE which is often used for column headers.\nThis is a file generated by the XQUERY-MODULE (Transform) which typically contains a report.  This information [Hello from the URIS-FILE!] was passed from the Selector.\nThis is from the POST-BATCH-MODULE using the POST-XQUERY-MODULE.";
		boolean passed = expectedOutput.equals(corbOutput);
		clearFile(report);
		assertTrue(passed);
	}
	
	/**
	 * Functional test for the Manager's PRE-BATCH-TASK.
	 *
	 * @throws Exception
	 *
	 */
	@Test
	public void testManagersPreBatchTask()
		throws Exception {
		clearProperties();
		System.setProperty("XCC-CONNECTION-URI","xcc://admin:admin@localhost:2223/FFE");
		System.setProperty("COLLECTION-NAME","StringPassedToTheURIsModule"); 
		System.setProperty("XQUERY-MODULE","src\\test\\resources\\transform.xqy|ADHOC");
		System.setProperty("THREAD-COUNT","2");
		System.setProperty("MODULE-ROOT","/");
		System.setProperty("MODULES-DATABASE","Document"); 
		System.setProperty("INSTALL","false");
		System.setProperty("PROCESS-TASK","com.marklogic.developer.corb.ExportBatchToFileTask");
		System.setProperty("PRE-BATCH-MODULE","src\\test\\resources\\preBatchModule.xqy|ADHOC");
		System.setProperty("PRE-BATCH-TASK","com.marklogic.developer.corb.PreBatchUpdateFileTask");
		System.setProperty("POST-BATCH-MODULE","src\\test\\resources\\postBatchModule.xqy|ADHOC");
		System.setProperty("POST-BATCH-TASK","com.marklogic.developer.corb.PostBatchUpdateFileTask");
		System.setProperty("EXPORT-FILE-DIR","src\\test\\resources\\"); 
		System.setProperty("EXPORT-FILE-NAME","testManagersPreBatchTask.txt");
		System.setProperty("URIS-FILE","src\\test\\resources\\uriInputFile.txt");
		String[] args = {};
		Manager.main(args);
		String exportFilePath = "src\\test\\resources\\testManagersPreBatchTask.txt";
		File report = new File(exportFilePath);
		report.deleteOnExit();
		boolean fileExists = report.exists();
		assertTrue(fileExists);
		FileReader reader = new FileReader(report);
		char [] a = new char[400];
		reader.read(a);
		String corbOutput = String.valueOf(a).trim();
		System.out.println("testManagersPreBatchTask,corbOutput=" + corbOutput);
		String expectedOutput = "This is being returned from the PRE-BATCH-MODULE which is often used for column headers.";
		boolean passed = corbOutput.startsWith(expectedOutput);
		clearFile(report);
		assertTrue(passed);
	}
	
	/**
	 * Functional test for the Manager's POST-BATCH-TASK.
	 *
	 * @throws Exception
	 *
	 */
	@Test
	public void testManagersPostBatchTask()
		throws Exception {
		clearProperties();
		System.setProperty("XCC-CONNECTION-URI","xcc://admin:admin@localhost:2223/FFE");
		System.setProperty("COLLECTION-NAME","StringPassedToTheURIsModule"); 
		System.setProperty("XQUERY-MODULE","src\\test\\resources\\transform.xqy|ADHOC");
		System.setProperty("THREAD-COUNT","2");
		System.setProperty("MODULE-ROOT","/");
		System.setProperty("MODULES-DATABASE","Document"); 
		System.setProperty("INSTALL","false");
		System.setProperty("PROCESS-TASK","com.marklogic.developer.corb.ExportBatchToFileTask");
		System.setProperty("PRE-BATCH-MODULE","src\\test\\resources\\preBatchModule.xqy|ADHOC");
		System.setProperty("PRE-BATCH-TASK","com.marklogic.developer.corb.PreBatchUpdateFileTask");
		System.setProperty("POST-BATCH-MODULE","src\\test\\resources\\postBatchModule.xqy|ADHOC");
		System.setProperty("POST-BATCH-TASK","com.marklogic.developer.corb.PostBatchUpdateFileTask");
		System.setProperty("EXPORT-FILE-DIR","src\\test\\resources\\"); 
		System.setProperty("EXPORT-FILE-NAME","testManagersPostBatchTask.txt");
		System.setProperty("URIS-FILE","src\\test\\resources\\uriInputFile.txt");
		String[] args = {};
		Manager.main(args);
		String exportFilePath = "src\\test\\resources\\testManagersPostBatchTask.txt";
		File report = new File(exportFilePath);
		boolean fileExists = report.exists();
		assertTrue(fileExists);
		FileReader reader = new FileReader(report);
		char [] a = new char[400];
		reader.read(a);
		String corbOutput = String.valueOf(a).trim();
		System.out.println("testManagersPostBatchTask,corbOutput=" + corbOutput);
		String expectedOutput = "This is from the POST-BATCH-MODULE using the POST-XQUERY-MODULE.";
		boolean passed = corbOutput.endsWith(expectedOutput);
		clearFile(report);
		assertTrue(passed);
	}
	
	/**
	 * Functional test for the Manager's POST-BATCH-TASK for zipping the output file.
	 *
	 * @throws Exception
	 *
	 */
	@Test
	public void testManagersPostBatchTaskZip()
		throws Exception {
		clearProperties();
		System.setProperty("XCC-CONNECTION-URI","xcc://admin:admin@localhost:2223/FFE");
		System.setProperty("COLLECTION-NAME","StringPassedToTheURIsModule"); 
		System.setProperty("XQUERY-MODULE","src\\test\\resources\\transform.xqy|ADHOC");
		System.setProperty("THREAD-COUNT","2");
		System.setProperty("MODULE-ROOT","/");
		System.setProperty("MODULES-DATABASE","Document"); 
		System.setProperty("INSTALL","false");
		System.setProperty("PROCESS-TASK","com.marklogic.developer.corb.ExportBatchToFileTask");
		System.setProperty("PRE-BATCH-MODULE","src\\test\\resources\\preBatchModule.xqy|ADHOC");
		System.setProperty("PRE-BATCH-TASK","com.marklogic.developer.corb.PreBatchUpdateFileTask");
		System.setProperty("POST-BATCH-MODULE","src\\test\\resources\\postBatchModule.xqy|ADHOC");
		System.setProperty("POST-BATCH-TASK","com.marklogic.developer.corb.PostBatchUpdateFileTask");
		System.setProperty("EXPORT-FILE-DIR","src\\test\\resources\\"); 
		System.setProperty("EXPORT-FILE-NAME","helloWorld.txt");
		System.setProperty("URIS-FILE","src\\test\\resources\\uriInputFile.txt");
		System.setProperty("EXPORT_FILE_AS_ZIP","true");
		String[] args = {};
		Manager.main(args);
		String zippedExportFilePath = "src\\test\\resources\\helloWorld.txt.zip";
		File report = new File(zippedExportFilePath);
		boolean fileExists = report.exists();
		clearFile(report);
		assertTrue(fileExists);
		
	}
	
	/**
	 * Functional test for the Manager's POST-BATCH-TASK.
	 *
	 * @throws Exception
	 *
	 */
	@Test
	public void testManagerJavaScriptTransform()
		throws Exception {
		clearProperties();
		System.setProperty("XCC-CONNECTION-URI","xcc://admin:admin@localhost:2223/FFE");
		System.setProperty("COLLECTION-NAME","StringPassedToTheURIsModule"); 
		System.setProperty("XQUERY-MODULE","src\\test\\resources\\mod-print-uri.sjs|ADHOC");
		System.setProperty("THREAD-COUNT","2");
		System.setProperty("MODULE-ROOT","/");
		System.setProperty("MODULES-DATABASE","Document"); 
		System.setProperty("INSTALL","false");
		System.setProperty("PROCESS-TASK","com.marklogic.developer.corb.ExportBatchToFileTask");
		System.setProperty("PRE-BATCH-MODULE","src\\test\\resources\\preBatchModule.xqy|ADHOC");
		System.setProperty("PRE-BATCH-TASK","com.marklogic.developer.corb.PreBatchUpdateFileTask");
		System.setProperty("POST-BATCH-MODULE","src\\test\\resources\\postBatchModule.xqy|ADHOC");
		System.setProperty("POST-BATCH-TASK","com.marklogic.developer.corb.PostBatchUpdateFileTask");
		System.setProperty("EXPORT-FILE-DIR","src\\test\\resources\\"); 
		System.setProperty("EXPORT-FILE-NAME","testManagerJavaScriptTransform.txt");
		System.setProperty("URIS-FILE","src\\test\\resources\\uris-file.txt");
		System.setProperty("XQUERY-MODULE.foo","bar1");
		String[] args = {};
		Manager.main(args);
		String exportFilePath = "src\\test\\resources\\testManagerJavaScriptTransform.txt";
		File report = new File(exportFilePath);
		report.deleteOnExit();
		boolean fileExists = report.exists();
		assertTrue(fileExists);
		FileReader reader = new FileReader(report);
		char [] a = new char[400];
		reader.read(a);
		String corbOutput = String.valueOf(a).trim();
		System.out.println("testManagerJavaScriptTransform,corbOutput=" + corbOutput);
		String expectedOutput = "object-id-1=bar1";
		boolean passed = corbOutput.contains(expectedOutput);
		clearFile(report);
		assertTrue(passed);
	}
	
	

	/**
	 * Perform pre-test initialization.
	 *
	 * @throws Exception
	 *         if the initialization fails for some reason
	 *
	 * @generatedBy CodePro at 9/18/15 10:51 AM
	 */
	@Before
	public void setUp()
		throws Exception {
		// add additional set up code here
	}

	/**
	 * Perform post-test clean-up.
	 *
	 * @throws Exception
	 *         if the clean-up fails for some reason
	 *
	 * @generatedBy CodePro at 9/18/15 10:51 AM
	 */
	@After
	public void tearDown()
		throws Exception {
		String exportFilePath = "src\\test\\resources\\helloWorld.txt";
		File report = new File(exportFilePath);
		if (report.exists()) {
			report.delete();
		}
	}

	/**
	 * Launch the test.
	 *
	 * @param args the command line arguments
	 *
	 * @generatedBy CodePro at 9/18/15 10:51 AM
	 */
	public static void main(String[] args) {
		new org.junit.runner.JUnitCore().run(ManagerTest.class);
	}
	
	private void clearProperties() {
		System.clearProperty("URIS-MODULE");
		System.clearProperty("OPTIONS-FILE");
		System.clearProperty("XCC-CONNECTION-URI");
		System.clearProperty("COLLECTION-NAME"); 
		System.clearProperty("XQUERY-MODULE");
		System.clearProperty("THREAD-COUNT");
		System.clearProperty("MODULE-ROOT");
		System.clearProperty("MODULES-DATABASE"); 
		System.clearProperty("INSTALL");
		System.clearProperty("PROCESS-TASK");
		System.clearProperty("PRE-BATCH-MODULE");
		System.clearProperty("PRE-BATCH-TASK");
		System.clearProperty("POST-BATCH-MODULE");
		System.clearProperty("POST-BATCH-TASK");
		System.clearProperty("EXPORT-FILE-DIR"); 
		System.clearProperty("EXPORT-FILE-NAME");
		System.clearProperty("URIS-FILE");
		System.clearProperty("XQUERY-MODULE.foo");
		System.clearProperty("EXPORT_FILE_AS_ZIP");
	}
	
	private void clearFile(File file) {
		PrintWriter pw = null;
		try {
			pw = new PrintWriter(file);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if (pw != null) {
			pw.close();	
		}
	}
}